#!/bin/bash
#This batch aims to generate the feature-table and representative sequences through uparse algorithm in usearch software.

work_dir=$PWD
prefix=`cat configuration.txt | grep "^prefix" | cut -d "=" -f 2`
usearch_command=`cat configuration.txt | grep "^usearch_command" | cut -d "=" -f 2`
fastq_maxee=`cat configuration.txt | grep "^fastq_maxee" | cut -d "=" -f 2`

manifest=${prefix}_manifest
input_file=${work_dir}/${prefix}_merged
Usearch_dir=${work_dir}/${prefix}_USEARCH
output_file=${Usearch_dir}/${prefix}_filtered
filtered_output_info=${Usearch_dir}/${prefix}_filtered_fastx_info

echo "#============ This script is going to output these files ..."
echo	
echo ${prefix}_up_tab.qza
echo ${prefix}_up_rep.qza
echo ${prefix}_up_tab.qzv
echo ${prefix}_up_rep.qzv
echo
echo "#============ running batch ..."

#################################################################filter
cd ${work_dir}
if [ ! -d ${output_file} ]
then
	mkdir ${output_file}
else
	rm -r ${output_file}
	mkdir ${output_file}
fi

for seq in `ls ${input_file}`
do
	name=`echo ${seq} | cut -f1 -d"." `
	${usearch_command} -fastq_filter ${input_file}/${seq} -fastq_maxee ${fastq_maxee} -fastaout ${output_file}/${name}_filtered.fasta
done



cd ${work_dir}
if [ ! -d ${filtered_output_info} ]
then
	mkdir ${filtered_output_info}
else
	rm -r ${filtered_output_info}
	mkdir ${filtered_output_info}
fi
	
for seq in `ls ${output_file}`
do
	name=`echo ${seq} | cut -f1 -d"." `
	${usearch_command} -fastx_info ${output_file}/${seq} -output ${filtered_output_info}/${name}_info.log
done

################################################################pooling

input_file=${Usearch_dir}/${prefix}_filtered
output_file=${Usearch_dir}/${prefix}_pooling_data
command="usearch"

cd ${work_dir}
if [ ! -d ${output_file} ]
then
	mkdir ${output_file}
else
	rm -r ${output_file}
	mkdir ${output_file}
fi

cat ${input_file}/* > ${output_file}/pooling.fasta

${usearch_command} -fastx_info ${output_file}/pooling.fasta -output ${output_file}/pooling_info.log


#################################################################unique
input_file=${Usearch_dir}/${prefix}_pooling_data
output_file=${Usearch_dir}/${prefix}_unique

cd ${work_dir}
if [ ! -d ${output_file} ]
then
	mkdir ${output_file}
else
	rm -r ${output_file}
	mkdir ${output_file}
fi

nohup ${usearch_command} -fastx_uniques ${input_file}/pooling.fasta \
-fastaout ${output_file}/unique.fasta \
-sizeout -relabel Uniq > ${output_file}/unique.log

#################################################################uparse
input_file=${Usearch_dir}/${prefix}_unique
output_file=${Usearch_dir}/${prefix}_uparse

cd ${work_dir}
if [ ! -d ${output_file} ]
then
	mkdir ${output_file}
else
	rm -r ${output_file}
	mkdir ${output_file}
fi

nohup ${usearch_command} -cluster_otus ${input_file}/unique.fasta \
-otus ${output_file}/otus.fasta -uparseout \
${output_file}/otus.txt -relabel otu > ${output_file}/uparse.log

################################################################relabel
input_file=${Usearch_dir}/${prefix}_filtered
output_file=${Usearch_dir}/${prefix}_filter_relabel

cd ${work_dir}

if [ ! -d ${output_file} ]
then
	mkdir ${output_file}
else
	rm -r ${output_file}
	mkdir ${output_file}
fi

for seq in `ls ${work_dir}/${prefix}_merged`
do
	name=`echo ${seq} | cut -f1 -d"."`
	sed "s/>.*/>${name}/g" ${input_file}/${name}* > ${output_file}/${name}_filtered_relabel.fasta
done

############################################################generateTab
input_file1=${Usearch_dir}/${prefix}_filter_relabel
input_file2=${Usearch_dir}/${prefix}_uparse
output_file1=${Usearch_dir}/${prefix}_otutab_uparse

cd ${work_dir}
if [ ! -d ${output_file1} ]
then
	mkdir ${output_file1}
else
	rm -r ${output_file1}
	mkdir ${output_file1}
fi

for seq in `ls ${work_dir}/${prefix}_merged`
do
	name=`echo ${seq} | cut -f1 -d"."`
	nohup ${usearch_command} \
	-otutab ${input_file1}/${name}* \
	-otus ${input_file2}/otus.fasta \
	-otutabout ${output_file1}/${name}_tab.txt \
	-mapout ${output_file1}/${name}_map.txt \
	-notmatched ${output_file1}/${name}_unmapped.fasta >> \
	${output_file1}/otutab_uparse.log
done

############################################################otutabMerge
work_dir1=${Usearch_dir}/${prefix}_otutab_uparse
output_file1=${work_dir1}/merge_tab.txt

cd ${work_dir}

#Creating a core function to process the merging 
function merge_process(){
	nohup head merge_tab.txt && rm merge_tab.txt > /dev/null
	in=`ls | grep tab.txt | sed ':a;N;$!ba; s/\n/,/g'`
	${usearch_command} -otutab_merge ${in} -output merge_tab.txt
}

#Start merging
cd ${work_dir1}
merge_process


#########################################################usearchToQiime
input_file2=${Usearch_dir}/${prefix}_otutab_uparse
output_file2=${Usearch_dir}/${prefix}_uparse_to_qiime

cd ${Usearch_dir}

if [ ! -d ${output_file2} ]
then
	mkdir ${output_file2}
else
	rm -r ${output_file2}
	mkdir ${output_file2}
fi

biom convert -i ${input_file2}/merge_tab.txt \
-o ${output_file2}/merge_tab_v100.biom \
--table-type="OTU table" --to-json

qiime tools import \
  --input-path ${output_file2}/merge_tab_v100.biom \
  --type 'FeatureTable[Frequency]' \
  --input-format BIOMV100Format \
  --output-path ${output_file2}/${prefix}_up_tab.qza

qiime tools import \
  --input-path ${Usearch_dir}/${prefix}_uparse/otus.fasta \
  --output-path ${output_file2}/${prefix}_up_rep.qza \
  --type 'FeatureData[Sequence]'
  
###visualization
cd ${work_dir}

qiime feature-table summarize \
  --m-sample-metadata-file ${manifest}.tsv \
  --i-table ${output_file2}/${prefix}_up_tab.qza \
  --o-visualization ${output_file2}/${prefix}_up_tab.qzv
  
qiime feature-table tabulate-seqs \
  --i-data ${output_file2}/${prefix}_up_rep.qza \
  --o-visualization ${output_file2}/${prefix}_up_rep.qzv


if [ -f ${prefix}_up_tab.qza -o -f ${prefix}_up_tab.qzv ]
then
	rm -f ./${prefix}_up_tab.qza
    cp ${output_file2}/${prefix}_up_tab.qz* .
else
    cp ${output_file2}/${prefix}_up_tab.qz* .
fi

if [ -f ${prefix}_up_rep.qza -o -f ${prefix}_up_rep.qzv ]
then
    rm -f ./${prefix}_up_rep.qza
	cp ${output_file2}/${prefix}_up_rep.qz* .
else
    cp ${output_file2}/${prefix}_up_rep.qz* .
fi

exit 0
